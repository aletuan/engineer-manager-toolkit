// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Entities
model User {
  id            String      @id @default(uuid())
  email         String      @unique
  passwordHash  String
  squadMember   SquadMember?
  activityLogs  ActivityLog[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Squad {
  id                String            @id @default(uuid())
  name              String
  code              String            @unique
  description       String?
  members           SquadMember[]
  incidentRotations IncidentRotation[]
  sprintReports     SprintReport[]
  roleAssignments   RoleAssignment[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model SquadMember {
  id                String            @id @default(uuid())
  squad             Squad             @relation(fields: [squadId], references: [id])
  squadId           String
  user              User              @relation(fields: [userId], references: [id])
  userId            String            @unique
  pid               String            @unique
  fullName          String
  email             String            @unique
  phone             String?
  position          String?
  avatarUrl         String?
  status            MemberStatus      @default(ACTIVE)
  assignedTasks     Task[]            @relation("AssignedTasks")
  createdTasks      Task[]            @relation("CreatedTasks")
  taskComments      TaskComment[]     @relation("CommentAuthor")
  taskNotes         TaskNote[]        @relation("NoteAuthor")
  taskAssignments   TaskAssignee[]
  primaryRotations  IncidentRotation[] @relation("PrimaryMember")
  secondaryRotations IncidentRotation[] @relation("SecondaryMember")
  requestedSwaps    RotationSwap[]    @relation("SwapRequester")
  acceptedSwaps     RotationSwap[]    @relation("SwapAccepter")
  roleAssignments   RoleAssignment[]
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  @@index([squadId])
  @@index([userId])
}

model Stakeholder {
  id          String            @id @default(uuid())
  code        String            @unique
  name        String
  description String?
  contactName String?
  contactEmail String?
  contactPhone String?
  groupName   String?
  tasks       TaskStakeholder[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model Task {
  id          String      @id @default(uuid())
  title       String
  description String
  status      TaskStatus  @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime
  featureId   String
  assignedTo  SquadMember @relation("AssignedTasks", fields: [assignedToId], references: [id])
  assignedToId String
  createdBy   SquadMember @relation("CreatedTasks", fields: [createdById], references: [id])
  createdById String
  tags        String[]
  attachments Json
  comments    TaskComment[]
  notes       TaskNote[]
  assignees   TaskAssignee[]
  stakeholders TaskStakeholder[]
  dependencies TaskDependency[] @relation("DependentTasks")
  dependents   TaskDependency[] @relation("DependentOnTasks")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([assignedToId])
  @@index([createdById])
  @@index([featureId])
}

// Supporting Entities
model TaskAssignee {
  id        String      @id @default(uuid())
  task      Task        @relation(fields: [taskId], references: [id])
  taskId    String
  member    SquadMember @relation(fields: [memberId], references: [id])
  memberId  String
  role      AssigneeRole
  createdAt DateTime    @default(now())

  @@index([taskId])
  @@index([memberId])
}

model TaskStakeholder {
  id          String      @id @default(uuid())
  task        Task        @relation(fields: [taskId], references: [id])
  taskId      String
  stakeholder Stakeholder @relation(fields: [stakeholderId], references: [id])
  stakeholderId String
  createdAt   DateTime    @default(now())

  @@index([taskId])
  @@index([stakeholderId])
}

model TaskDependency {
  id              String         @id @default(uuid())
  task            Task           @relation("DependentTasks", fields: [taskId], references: [id])
  taskId          String
  dependentTask   Task           @relation("DependentOnTasks", fields: [dependentTaskId], references: [id])
  dependentTaskId String
  dependencyType  DependencyType
  createdAt       DateTime       @default(now())

  @@index([taskId])
  @@index([dependentTaskId])
}

model TaskNote {
  id        String      @id @default(uuid())
  content   String
  task      Task        @relation(fields: [taskId], references: [id])
  taskId    String
  author    SquadMember @relation("NoteAuthor", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([taskId])
  @@index([authorId])
}

model IncidentRotation {
  id                String        @id @default(uuid())
  squad             Squad         @relation(fields: [squadId], references: [id])
  squadId           String
  primaryMember     SquadMember   @relation("PrimaryMember", fields: [primaryMemberId], references: [id])
  primaryMemberId   String
  secondaryMember   SquadMember   @relation("SecondaryMember", fields: [secondaryMemberId], references: [id])
  secondaryMemberId String
  startDate         DateTime
  endDate           DateTime
  sprintNumber      Int
  swaps             RotationSwap[]
  createdAt         DateTime      @default(now())

  @@index([squadId])
  @@index([primaryMemberId])
  @@index([secondaryMemberId])
}

model RotationSwap {
  id          String          @id @default(uuid())
  rotation    IncidentRotation @relation(fields: [rotationId], references: [id])
  rotationId  String
  requester   SquadMember     @relation("SwapRequester", fields: [requesterId], references: [id])
  requesterId String
  accepter    SquadMember     @relation("SwapAccepter", fields: [accepterId], references: [id])
  accepterId  String
  swapDate    DateTime
  status      String          @default("PENDING")
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@index([rotationId])
  @@index([requesterId])
  @@index([accepterId])
}

// Monitoring & Analytics
model ActivityLog {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  entityType String
  entityId  String
  action    String
  details   Json
  createdAt DateTime @default(now())

  @@index([userId])
}

model SprintReport {
  id              String   @id @default(uuid())
  squad           Squad    @relation(fields: [squadId], references: [id])
  squadId         String
  sprintNumber    Int
  startDate       DateTime
  endDate         DateTime
  totalPoints     Int
  completedPoints Int
  memberMetrics   Json
  stakeholderMetrics Json
  createdAt       DateTime @default(now())

  @@index([squadId])
}

// Enums
enum MemberStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  DONE
}

enum AssigneeRole {
  PRIMARY
  SECONDARY
  REVIEWER
}

enum DependencyType {
  BLOCKS
  BLOCKED_BY
  RELATES_TO
}

model Role {
  id          String          @id @default(uuid())
  name        String          @unique
  description String?
  permissions String[]
  assignments RoleAssignment[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model RoleAssignment {
  id        String      @id @default(uuid())
  squad     Squad       @relation(fields: [squadId], references: [id])
  squadId   String
  member    SquadMember @relation(fields: [memberId], references: [id])
  memberId  String
  role      Role        @relation(fields: [roleId], references: [id])
  roleId    String
  assignedBy String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  @@index([squadId])
  @@index([memberId])
  @@index([roleId])
}

model TaskComment {
  id        String      @id @default(uuid())
  content   String
  task      Task        @relation(fields: [taskId], references: [id])
  taskId    String
  createdBy SquadMember @relation("CommentAuthor", fields: [createdById], references: [id])
  createdById String
  createdAt DateTime    @default(now())

  @@index([taskId])
  @@index([createdById])
} 