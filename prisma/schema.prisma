// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Core Entities
model User {
  id           String         @id @default(uuid())
  email        String        @unique
  passwordHash String
  squadMember  SquadMember?
  tasks        Task[]        @relation("CreatedBy")
  taskNotes    TaskNote[]
  activityLogs ActivityLog[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("users")
}

model Squad {
  id              String            @id @default(uuid())
  name            String
  code            String            @unique
  description     String?
  members         SquadMember[]
  tasks           Task[]
  incidentRotations IncidentRotation[]
  sprintReports   SprintReport[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("squads")
}

model SquadMember {
  id                String            @id @default(uuid())
  squadId          String
  userId           String            @unique
  pid              String            @unique
  fullName         String
  email            String
  phone            String
  position         String
  avatarUrl        String?
  status           MemberStatus      @default(ACTIVE)
  squad            Squad             @relation(fields: [squadId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
  taskAssignments  TaskAssignee[]
  primaryRotations IncidentRotation[] @relation("PrimaryMember")
  secondaryRotations IncidentRotation[] @relation("SecondaryMember")
  requestedSwaps   RotationSwap[]    @relation("Requester")
  acceptedSwaps    RotationSwap[]    @relation("Accepter")
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt

  @@map("squad_members")
}

model Stakeholder {
  id           String            @id @default(uuid())
  code         String            @unique
  name         String
  description  String?
  contactName  String
  contactEmail String
  contactPhone String
  groupName    String
  tasks        TaskStakeholder[]
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  @@map("stakeholders")
}

model Task {
  id              String            @id @default(uuid())
  featureId       String
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  points          Int
  priority        TaskPriority
  status          TaskStatus        @default(NOT_STARTED)
  progress        Int               @default(0)
  createdById     String
  squadId         String
  createdBy       User              @relation("CreatedBy", fields: [createdById], references: [id])
  squad           Squad             @relation(fields: [squadId], references: [id])
  assignees       TaskAssignee[]
  stakeholders    TaskStakeholder[]
  dependencies    TaskDependency[]  @relation("DependentTask")
  dependents      TaskDependency[]  @relation("BlockingTask")
  notes           TaskNote[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("tasks")
}

// Supporting Entities
model TaskAssignee {
  taskId    String
  memberId  String
  role      AssigneeRole
  task      Task        @relation(fields: [taskId], references: [id])
  member    SquadMember @relation(fields: [memberId], references: [id])
  createdAt DateTime    @default(now())

  @@id([taskId, memberId])
  @@map("task_assignees")
}

model TaskStakeholder {
  taskId       String
  stakeholderId String
  task         Task       @relation(fields: [taskId], references: [id])
  stakeholder  Stakeholder @relation(fields: [stakeholderId], references: [id])
  createdAt    DateTime    @default(now())

  @@id([taskId, stakeholderId])
  @@map("task_stakeholders")
}

model TaskDependency {
  taskId           String
  dependentTaskId  String
  dependencyType   DependencyType
  task             Task          @relation("DependentTask", fields: [taskId], references: [id])
  dependentTask    Task          @relation("BlockingTask", fields: [dependentTaskId], references: [id])
  createdAt        DateTime      @default(now())

  @@id([taskId, dependentTaskId])
  @@map("task_dependencies")
}

model TaskNote {
  id        String   @id @default(uuid())
  taskId    String
  authorId  String
  content   String
  task      Task     @relation(fields: [taskId], references: [id])
  author    User     @relation(fields: [authorId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("task_notes")
}

model IncidentRotation {
  id                String      @id @default(uuid())
  squadId           String
  primaryMemberId   String
  secondaryMemberId String
  startDate         DateTime
  endDate           DateTime
  sprintNumber      Int
  squad             Squad       @relation(fields: [squadId], references: [id])
  primaryMember     SquadMember @relation("PrimaryMember", fields: [primaryMemberId], references: [id])
  secondaryMember   SquadMember @relation("SecondaryMember", fields: [secondaryMemberId], references: [id])
  swaps             RotationSwap[]
  createdAt         DateTime    @default(now())

  @@map("incident_rotations")
}

model RotationSwap {
  id           String           @id @default(uuid())
  rotationId   String
  requesterId  String
  accepterId   String
  swapDate     DateTime
  status       SwapStatus       @default(PENDING)
  rotation     IncidentRotation @relation(fields: [rotationId], references: [id])
  requester    SquadMember      @relation("Requester", fields: [requesterId], references: [id])
  accepter     SquadMember      @relation("Accepter", fields: [accepterId], references: [id])
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  @@map("rotation_swaps")
}

// Monitoring & Analytics
model ActivityLog {
  id         String   @id @default(uuid())
  userId     String
  entityType String
  entityId   String
  action     String
  details    Json
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())

  @@map("activity_logs")
}

model SprintReport {
  id                 String   @id @default(uuid())
  squadId            String
  sprintNumber       Int
  startDate          DateTime
  endDate            DateTime
  totalPoints        Int
  completedPoints    Int
  memberMetrics      Json
  stakeholderMetrics Json
  squad              Squad    @relation(fields: [squadId], references: [id])
  createdAt          DateTime @default(now())

  @@map("sprint_reports")
}

// Enums
enum MemberStatus {
  ACTIVE
  INACTIVE
}

enum TaskPriority {
  HIGH
  MEDIUM
  LOW
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  BLOCKED
}

enum AssigneeRole {
  PRIMARY
  SECONDARY
}

enum DependencyType {
  BLOCKS
  BLOCKED_BY
}

enum SwapStatus {
  PENDING
  APPROVED
  REJECTED
} 